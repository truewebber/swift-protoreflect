import Foundation

/// –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ SwiftProtoReflect
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞, –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
public enum ExampleUtils {
    
    // MARK: - Console Output with Colors
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    public static func printHeader(_ title: String) {
        let maxWidth = 70
        let titleWidth = min(title.count, maxWidth - 4)
        let separator = String(repeating: "‚ïê", count: titleWidth + 4)
        
        print("\n\u{001B}[34m\(separator)\u{001B}[0m")
        print("\u{001B}[34m  \u{001B}[1;37m\(title)\u{001B}[0m\u{001B}[34m  \u{001B}[0m")
        print("\u{001B}[34m\(separator)\u{001B}[0m\n")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –Ω–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    public static func printStep(_ number: Int, _ description: String) {
        print("\n\u{001B}[33müìù –®–∞–≥ \(number): \(description)\u{001B}[0m")
        let underline = String(repeating: "‚îÄ", count: min(description.count + 10, 50))
        print("\u{001B}[36m\(underline)\u{001B}[0m")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    public static func printSuccess(_ message: String) {
        print("\n\u{001B}[32müéâ \(message)\u{001B}[0m")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    public static func printError(_ message: String) {
        print("\n\u{001B}[31m‚ùå –û—à–∏–±–∫–∞: \(message)\u{001B}[0m")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    public static func printWarning(_ message: String) {
        print("\n\u{001B}[33m‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: \(message)\u{001B}[0m")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    public static func printInfo(_ message: String) {
        print("\n\u{001B}[36müí° \(message)\u{001B}[0m")
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    public static func printNext(_ suggestions: [String]) {
        print("\n\u{001B}[36müîç –ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ:\u{001B}[0m")
        for suggestion in suggestions {
            print("\u{001B}[37m  ‚Ä¢ \(suggestion)\u{001B}[0m")
        }
        print()
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    public static func printSeparator() {
        print("\u{001B}[34m" + String(repeating: "‚îÄ", count: 50) + "\u{001B}[0m")
    }
    
    // MARK: - Performance Measurement
    
    /// –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
    public static func measureTime<T>(_ operation: () throws -> T) rethrows -> (result: T, time: TimeInterval) {
        let startTime = CFAbsoluteTimeGetCurrent()
        let result = try operation()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        return (result, timeElapsed)
    }
    
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    public static func printTiming(_ description: String, time: TimeInterval) {
        let timeString: String
        if time < 0.001 {
            timeString = String(format: "%.1f Œºs", time * 1_000_000)
        } else if time < 1.0 {
            timeString = String(format: "%.3f ms", time * 1000)
        } else {
            timeString = String(format: "%.3f s", time)
        }
        print("  \u{001B}[35m‚è±  \(description): \(timeString)\u{001B}[0m")
    }
    
    // MARK: - Data Generation Helpers
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    public static func generateRandomString(length: Int = 10) -> String {
        let letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        return String((0..<length).map{ _ in letters.randomElement()! })
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Person —Å–æ–æ–±—â–µ–Ω–∏—è
    public static func generateTestPersonData() -> [String: Any] {
        let names = ["Alice", "Bob", "Charlie", "Diana", "Eve", "Frank", "Grace", "Henry"]
        let domains = ["example.com", "test.org", "demo.net", "sample.io"]
        let hobbies = ["reading", "swimming", "coding", "painting", "music", "traveling", "cooking", "sports"]
        
        let name = names.randomElement()!
        let age = Int32.random(in: 18...80)
        let email = "\(name.lowercased())@\(domains.randomElement()!)"
        let selectedHobbies = Array(hobbies.shuffled().prefix(Int.random(in: 1...3)))
        
        return [
            "name": name,
            "age": age,
            "email": email,
            "hobbies": selectedHobbies
        ]
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Company —Å–æ–æ–±—â–µ–Ω–∏—è
    public static func generateTestCompanyData() -> [String: Any] {
        let companies = ["TechCorp", "DataSys", "CloudWorks", "DevLabs", "CodeForge"]
        let cities = ["San Francisco", "New York", "London", "Tokyo", "Berlin"]
        let countries = ["USA", "USA", "UK", "Japan", "Germany"]
        
        let companyName = companies.randomElement()!
        let cityIndex = Int.random(in: 0..<cities.count)
        
        return [
            "name": companyName,
            "headquarters": [
                "street": "\(Int.random(in: 1...999)) \(companyName) Street",
                "city": cities[cityIndex],
                "country": countries[cityIndex],
                "postal_code": String(format: "%05d", Int.random(in: 10000...99999))
            ],
            "type": ["STARTUP", "CORPORATION", "NON_PROFIT"].randomElement()!
        ]
    }
    
    // MARK: - File Helpers
    
    /// –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ resources/data/
    public static func readResourceFile(_ filename: String) -> String? {
        let resourcePath = "resources/data/\(filename)"
        return try? String(contentsOfFile: resourcePath, encoding: .utf8)
    }
    
    /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    public static func writeToTempFile(_ content: String, filename: String) -> String? {
        let tempDir = NSTemporaryDirectory()
        let outputPath = "\(tempDir)\(filename)"
        
        do {
            try content.write(toFile: outputPath, atomically: true, encoding: .utf8)
            print("  \u{001B}[36müìÑ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: \(outputPath)\u{001B}[0m")
            return outputPath
        } catch {
            printError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª: \(error)")
            return nil
        }
    }
    
    // MARK: - Formatting Helpers
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    public static func formatDataSize(_ bytes: Int) -> String {
        if bytes < 1024 {
            return "\(bytes) bytes"
        } else if bytes < 1024 * 1024 {
            return String(format: "%.1f KB", Double(bytes) / 1024)
        } else {
            return String(format: "%.1f MB", Double(bytes) / (1024 * 1024))
        }
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Data –∫–∞–∫ hex —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    public static func formatDataPreview(_ data: Data, maxBytes: Int = 20) -> String {
        let bytesToShow = min(data.count, maxBytes)
        let hexString = data.prefix(bytesToShow).map { String(format: "%02x", $0) }.joined(separator: " ")
        
        if data.count > maxBytes {
            return "\(hexString)..."
        } else {
            return hexString
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö key-value
    public static func printTable<T>(_ data: [String: T], title: String? = nil) {
        if let title = title {
            print("\n\u{001B}[37müìã \(title):\u{001B}[0m")
        } else {
            print("\n\u{001B}[37müìã Data:\u{001B}[0m")
        }
        
        let maxKeyLength = data.keys.map { $0.count }.max() ?? 0
        
        for (key, value) in data.sorted(by: { $0.key < $1.key }) {
            let paddedKey = key.padding(toLength: maxKeyLength, withPad: " ", startingAt: 0)
            print("  \u{001B}[36m\(paddedKey)\u{001B}[0m: \(value)")
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    public static func printDataTable(_ data: [[String: String]], title: String? = nil) {
        guard !data.isEmpty else {
            if let title = title {
                print("\n\u{001B}[37müìã \(title): (empty)\u{001B}[0m")
            }
            return
        }
        
        if let title = title {
            print("\n\u{001B}[37müìã \(title):\u{001B}[0m")
        }
        
        // –ù–∞–π—Ç–∏ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã
        let allKeys = Set(data.flatMap { $0.keys })
        let sortedKeys = allKeys.sorted()
        
        var columnWidths: [String: Int] = [:]
        for key in sortedKeys {
            let maxValueLength = data.compactMap { $0[key]?.count }.max() ?? 0
            columnWidths[key] = max(key.count, maxValueLength, 5) // –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤
        }
        
        // –ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let headerLine = sortedKeys.map { key in
            key.padding(toLength: columnWidths[key]!, withPad: " ", startingAt: 0)
        }.joined(separator: " ‚îÇ ")
        print("  \u{001B}[1;36m\(headerLine)\u{001B}[0m")
        
        // –ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        let separatorLine = sortedKeys.map { key in
            String(repeating: "‚îÄ", count: columnWidths[key]!)
        }.joined(separator: "‚îÄ‚îº‚îÄ")
        print("  \u{001B}[36m\(separatorLine)\u{001B}[0m")
        
        // –ü–µ—á–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö
        for row in data {
            let dataLine = sortedKeys.map { key in
                let value = row[key] ?? ""
                return value.padding(toLength: columnWidths[key]!, withPad: " ", startingAt: 0)
            }.joined(separator: " ‚îÇ ")
            print("  \(dataLine)")
        }
    }
    
    // MARK: - Validation Helpers
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    public static func assertEqual<T: Equatable>(_ actual: T, _ expected: T, description: String) -> Bool {
        if actual == expected {
            print("  \u{001B}[32m‚úÖ \(description): OK\u{001B}[0m")
            return true
        } else {
            print("  \u{001B}[31m‚ùå \(description): Expected \(expected), got \(actual)\u{001B}[0m")
            return false
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ nil
    public static func assertNotNil<T>(_ value: T?, description: String) -> Bool {
        if value != nil {
            print("  \u{001B}[32m‚úÖ \(description): Not nil\u{001B}[0m")
            return true
        } else {
            print("  \u{001B}[31m‚ùå \(description): Unexpected nil\u{001B}[0m")
            return false
        }
    }
    
    // MARK: - Interactive Helpers
    
    /// –û–∂–∏–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è Enter –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public static func waitForEnter(message: String = "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...") {
        print("\n\u{001B}[33m\(message)\u{001B}[0m")
        _ = readLine()
    }
    
    /// –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    public static func askUser(_ question: String, options: [String] = ["y", "n"]) -> String? {
        let optionsStr = options.joined(separator: "/")
        print("\n\u{001B}[33m‚ùì \(question) (\(optionsStr)): \u{001B}[0m", terminator: "")
        
        if let input = readLine()?.lowercased().trimmingCharacters(in: .whitespacesAndNewlines) {
            return options.contains(input) ? input : options.first
        }
        return options.first
    }
}

// MARK: - DynamicMessage Extensions

import SwiftProtoReflect

extension DynamicMessage {
    /// –ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    public func prettyPrint() {
        print("    \u{001B}[37müìã \(descriptor.name):\u{001B}[0m")
        
        let fieldsWithValues = descriptor.fields.values.filter { field in
            do {
                return try hasValue(forField: field.name)
            } catch {
                return false
            }
        }
        
        if fieldsWithValues.isEmpty {
            print("      \u{001B}[90m(no fields set)\u{001B}[0m")
            return
        }
        
        for field in fieldsWithValues {
            do {
                let value = try get(forField: field.name)
                let displayValue = formatFieldValue(value, fieldType: field.type)
                print("      \u{001B}[36m\(field.name)\u{001B}[0m: \(displayValue)")
            } catch {
                print("      \u{001B}[36m\(field.name)\u{001B}[0m: \u{001B}[31m<error: \(error)>\u{001B}[0m")
            }
        }
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func formatFieldValue(_ value: Any?, fieldType: FieldType) -> String {
        guard let value = value else { return "\u{001B}[90mnil\u{001B}[0m" }
        
        switch value {
        case let string as String:
            return "\"\(string)\""
        case let data as Data:
            return "Data(\(data.count) bytes)"
        case let array as [Any]:
            if array.isEmpty {
                return "[]"
            } else if array.count <= 3 {
                let formatted = array.map { formatArrayElement($0) }.joined(separator: ", ")
                return "[\(formatted)]"
            } else {
                let firstThree = array.prefix(3).map { formatArrayElement($0) }.joined(separator: ", ")
                return "[\(firstThree), ... (\(array.count) items)]"
            }
        case let message as DynamicMessage:
            return "\(message.descriptor.name) {...}"
        default:
            return "\(value)"
        }
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    private func formatArrayElement(_ element: Any) -> String {
        switch element {
        case let string as String:
            return "\"\(string)\""
        case let message as DynamicMessage:
            return message.descriptor.name
        default:
            return "\(element)"
        }
    }
}
