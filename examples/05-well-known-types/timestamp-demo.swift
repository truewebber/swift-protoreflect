/**
 * ‚è∞ SwiftProtoReflect Example: Timestamp Demo
 *
 * –û–ø–∏—Å–∞–Ω–∏–µ: –†–∞–±–æ—Ç–∞ —Å google.protobuf.Timestamp –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å Foundation.Date
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: TimestampHandler, WellKnownTypes, Date conversion
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å: üîß –°—Ä–µ–¥–Ω–∏–π
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: < 10 —Å–µ–∫—É–Ω–¥
 *
 * –ß—Ç–æ –∏–∑—É—á–∏—Ç–µ:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è google.protobuf.Timestamp
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Foundation.Date
 * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * - Round-trip —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 *
 * –ó–∞–ø—É—Å–∫:
 *   swift run TimestampDemo
 */

import ExampleUtils
import Foundation
import SwiftProtoReflect

@main
struct TimestampDemo {
  static func main() throws {
    ExampleUtils.printHeader("Google Protobuf Timestamp Integration")

    try demonstrateBasicUsage()
    try demonstrateAdvancedOperations()
    try demonstrateRoundTripCompatibility()
    try demonstrateEdgeCases()
    try demonstratePerformanceAndPrecision()

    ExampleUtils.printSuccess("Timestamp demo –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Å google.protobuf.Timestamp.")

    ExampleUtils.printNext([
      "–î–∞–ª–µ–µ –∏–∑—É—á–∏—Ç–µ: duration-demo.swift - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã",
      "–°—Ä–∞–≤–Ω–∏—Ç–µ: empty-demo.swift - –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
      "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ: field-mask-demo.swift - –º–∞—Å–∫–∏ –ø–æ–ª–µ–π –¥–ª—è updates",
    ])
  }

  // MARK: - Implementation Steps

  private static func demonstrateBasicUsage() throws {
    ExampleUtils.printStep(1, "Basic Timestamp Operations")

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    let now = Date()
    let timestampValue = TimestampHandler.TimestampValue(from: now)
    let timestampMessage = try TimestampHandler.createDynamic(from: timestampValue)

    print("  üìÖ Current date: \(now)")
    print("  ‚è∞ Timestamp seconds: \(timestampValue.seconds)")
    print("  üî¢ Timestamp nanos: \(timestampValue.nanos)")

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ
    let extractedValue =
      try TimestampHandler.createSpecialized(from: timestampMessage) as! TimestampHandler.TimestampValue
    let reconstructedDate = extractedValue.toDate()

    print("  üîÑ Reconstructed date: \(reconstructedDate)")

    let timeDifference = abs(now.timeIntervalSince(reconstructedDate))
    print("  ‚úÖ Precision (time difference): \(String(format: "%.6f", timeDifference)) seconds")
    print("  ‚úÖ High precision match: \(timeDifference < 0.001 ? "YES" : "NO")")

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    print("  üìã Message structure:")
    print("    Message type: \(timestampMessage.descriptor.name)")
    print("    Fields count: \(timestampMessage.descriptor.fields.count)")
    for field in timestampMessage.descriptor.fields.values {
      let value = try? timestampMessage.get(forField: field.name)
      print("    \(field.name): \(value ?? "nil")")
    }
  }

  private static func demonstrateAdvancedOperations() throws {
    ExampleUtils.printStep(2, "Advanced Timestamp Operations")

    // –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    let significantTimestamps = [
      ("Unix epoch", Date(timeIntervalSince1970: 0)),
      ("Y2K moment", Date(timeIntervalSince1970: 946_684_800)),
      ("Swift announcement", Date(timeIntervalSince1970: 1_401_843_600)),  // WWDC 2014
      ("Recent past", Date().addingTimeInterval(-86400 * 30)),  // 30 days ago
      ("Near future", Date().addingTimeInterval(86400 * 7)),  // 1 week from now
    ]

    ExampleUtils.printDataTable(
      significantTimestamps.map { (label, date) in
        let timestampValue = TimestampHandler.TimestampValue(from: date)
        return [
          "Event": label,
          "Date": DateFormatter.iso8601.string(from: date),
          "Seconds": "\(timestampValue.seconds)",
          "Nanos": "\(timestampValue.nanos)",
        ]
      },
      title: "Historical Timestamps"
    )

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    print("  üéØ Precision demonstration:")
    let preciseTime = Date()
    let nanoTimestamp = TimestampHandler.TimestampValue(from: preciseTime)
    let nanoMessage = try TimestampHandler.createDynamic(from: nanoTimestamp)
    let nanoExtracted = try TimestampHandler.createSpecialized(from: nanoMessage) as! TimestampHandler.TimestampValue
    let nanoReconstructed = nanoExtracted.toDate()

    let precisionLoss = abs(preciseTime.timeIntervalSince(nanoReconstructed))
    print(
      "    Original microseconds: \(String(format: "%.6f", preciseTime.timeIntervalSince1970.truncatingRemainder(dividingBy: 1)))"
    )
    print(
      "    Reconstructed microseconds: \(String(format: "%.6f", nanoReconstructed.timeIntervalSince1970.truncatingRemainder(dividingBy: 1)))"
    )
    print("    Precision loss: \(String(format: "%.9f", precisionLoss)) seconds")
  }

  private static func demonstrateRoundTripCompatibility() throws {
    ExampleUtils.printStep(3, "Round-Trip Compatibility Testing")

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    let testDates = [
      Date(timeIntervalSince1970: 0.123456789),  // Microsecond precision
      Date(timeIntervalSince1970: 1234567890.987654321),  // Large timestamp
      Date().addingTimeInterval(0.000000001),  // Nanosecond difference
      Date(timeIntervalSince1970: -1_234_567_890),  // Before epoch
    ]

    var allTestsPassed = true
    var testResults: [[String: String]] = []

    for (index, originalDate) in testDates.enumerated() {
      do {
        // Forward conversion: Date -> Timestamp -> DynamicMessage
        let timestampValue = TimestampHandler.TimestampValue(from: originalDate)
        let message = try TimestampHandler.createDynamic(from: timestampValue)

        // Backward conversion: DynamicMessage -> Timestamp -> Date
        let extractedValue = try TimestampHandler.createSpecialized(from: message) as! TimestampHandler.TimestampValue
        let reconstructedDate = extractedValue.toDate()

        // Analyze precision
        let timeDifference = abs(originalDate.timeIntervalSince(reconstructedDate))
        let testPassed = timeDifference < 0.000001  // 1 microsecond tolerance

        testResults.append([
          "Test": "Test \(index + 1)",
          "Original": String(format: "%.6f", originalDate.timeIntervalSince1970),
          "Reconstructed": String(format: "%.6f", reconstructedDate.timeIntervalSince1970),
          "Difference": String(format: "%.9f", timeDifference),
          "Status": testPassed ? "‚úÖ PASS" : "‚ùå FAIL",
        ])

        if !testPassed {
          allTestsPassed = false
        }
      }
      catch {
        testResults.append([
          "Test": "Test \(index + 1)",
          "Original": String(format: "%.6f", originalDate.timeIntervalSince1970),
          "Reconstructed": "ERROR",
          "Difference": "N/A",
          "Status": "‚ùå ERROR: \(error)",
        ])
        allTestsPassed = false
      }
    }

    ExampleUtils.printDataTable(testResults, title: "Round-Trip Test Results")

    print("  üèÜ Overall round-trip compatibility: \(allTestsPassed ? "‚úÖ EXCELLENT" : "‚ö†Ô∏è NEEDS ATTENTION")")
  }

  private static func demonstrateEdgeCases() throws {
    ExampleUtils.printStep(4, "Edge Cases and Validation")

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    let edgeCases = [
      ("Very small positive", Date(timeIntervalSince1970: 0.0001)),
      ("Very large valid", Date(timeIntervalSince1970: 253_402_300_799)),  // Max valid timestamp
      ("Negative timestamp", Date(timeIntervalSince1970: -62_135_596_800)),  // Min valid
      ("Current moment", Date()),
    ]

    var edgeResults: [[String: String]] = []

    for (label, date) in edgeCases {
      do {
        let timestampValue = TimestampHandler.TimestampValue(from: date)
        let message = try TimestampHandler.createDynamic(from: timestampValue)
        let extracted = try TimestampHandler.createSpecialized(from: message) as! TimestampHandler.TimestampValue

        // Validation checks
        let isValid = timestampValue.seconds >= -62_135_596_800 && timestampValue.seconds <= 253_402_300_799
        let nanosValid = timestampValue.nanos >= 0 && timestampValue.nanos < 1_000_000_000

        edgeResults.append([
          "Case": label,
          "Seconds": "\(timestampValue.seconds)",
          "Nanos": "\(timestampValue.nanos)",
          "Valid Range": isValid ? "‚úÖ YES" : "‚ùå NO",
          "Nanos Valid": nanosValid ? "‚úÖ YES" : "‚ùå NO",
          "Status": "‚úÖ SUCCESS",
        ])
      }
      catch {
        edgeResults.append([
          "Case": label,
          "Seconds": "N/A",
          "Nanos": "N/A",
          "Valid Range": "‚ùå ERROR",
          "Nanos Valid": "‚ùå ERROR",
          "Status": "‚ùå \(error)",
        ])
      }
    }

    ExampleUtils.printDataTable(edgeResults, title: "Edge Cases Validation")

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª Protocol Buffers
    print("  üìù Protocol Buffers validation rules:")
    print("    ‚Ä¢ Seconds must be in range [-62135596800, 253402300799]")
    print("    ‚Ä¢ Nanos must be in range [0, 999999999]")
    print("    ‚Ä¢ Nanos must be non-negative even for negative seconds")
    print("    ‚Ä¢ Canonical representation ensures consistent encoding")
  }

  private static func demonstratePerformanceAndPrecision() throws {
    ExampleUtils.printStep(5, "Performance and Precision Analysis")

    // Performance benchmarking
    let testCount = 1000
    var conversionTimes: [TimeInterval] = []

    let (_, totalTime) = ExampleUtils.measureTime {
      for _ in 0..<testCount {
        let (_, individualTime) = ExampleUtils.measureTime {
          let date = Date()
          let timestampValue = TimestampHandler.TimestampValue(from: date)
          let _ = try! TimestampHandler.createDynamic(from: timestampValue)
        }
        conversionTimes.append(individualTime)
      }
    }

    let averageTime = conversionTimes.reduce(0, +) / Double(conversionTimes.count)
    let minTime = conversionTimes.min() ?? 0
    let maxTime = conversionTimes.max() ?? 0

    ExampleUtils.printTiming("Average conversion (\(testCount) iterations)", time: averageTime)
    ExampleUtils.printTiming("Fastest conversion", time: minTime)
    ExampleUtils.printTiming("Slowest conversion", time: maxTime)
    ExampleUtils.printTiming("Total benchmark time", time: totalTime)

    let conversionsPerSecond = Double(testCount) / totalTime
    print("  üöÄ Performance: \(String(format: "%.0f", conversionsPerSecond)) conversions/second")

    // Precision analysis
    print("  üéØ Precision analysis:")
    let baseDate = Date()
    var precisionTests: [[String: String]] = []

    let precisionScales = [1e-3, 1e-6, 1e-9]  // millisecond, microsecond, nanosecond
    let scaleLabels = ["Millisecond", "Microsecond", "Nanosecond"]

    for (index, scale) in precisionScales.enumerated() {
      let adjustedDate = Date(timeIntervalSince1970: baseDate.timeIntervalSince1970 + scale)
      let timestampValue = TimestampHandler.TimestampValue(from: adjustedDate)
      let message = try TimestampHandler.createDynamic(from: timestampValue)
      let extracted = try TimestampHandler.createSpecialized(from: message) as! TimestampHandler.TimestampValue
      let reconstructed = extracted.toDate()

      let error = abs(adjustedDate.timeIntervalSince(reconstructed))
      let errorPercentage = (error / scale) * 100

      precisionTests.append([
        "Scale": scaleLabels[index],
        "Input Œî": String(format: "%.9f", scale),
        "Output Œî": String(format: "%.9f", reconstructed.timeIntervalSince(baseDate)),
        "Error": String(format: "%.9f", error),
        "Error %": String(format: "%.3f%%", errorPercentage),
      ])
    }

    ExampleUtils.printDataTable(precisionTests, title: "Precision Analysis")

    print("  üí° Key insights:")
    print("    ‚Ä¢ Protocol Buffers Timestamp –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å")
    print("    ‚Ä¢ Swift Date –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–æ–±—ã—á–Ω–æ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)")
    print("    ‚Ä¢ Round-trip –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥")
    print("    ‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —Ç–æ—á–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞")
  }
}

// MARK: - Extensions

extension DateFormatter {
  fileprivate static let iso8601: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'"
    formatter.timeZone = TimeZone(secondsFromGMT: 0)
    return formatter
  }()
}
