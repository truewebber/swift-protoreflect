/**
 * üì¶ SwiftProtoReflect Example: Struct Demo
 *
 * –û–ø–∏—Å–∞–Ω–∏–µ: –†–∞–±–æ—Ç–∞ —Å google.protobuf.Struct –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö JSON-like —Å—Ç—Ä—É–∫—Ç—É—Ä
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: StructHandler, ValueValue, Dynamic structures, JSON mapping
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å: üîß –°—Ä–µ–¥–Ω–∏–π
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: < 15 —Å–µ–∫—É–Ω–¥
 *
 * –ß—Ç–æ –∏–∑—É—á–∏—Ç–µ:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è google.protobuf.Struct
 * - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É Dictionary<String, Any> –∏ StructValue
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –º–∞—Å—Å–∏–≤–æ–≤
 * - ValueValue –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 * - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ (adding, removing, merging)
 * - Round-trip —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 *
 * –ó–∞–ø—É—Å–∫:
 *   swift run StructDemo
 */

import ExampleUtils
import Foundation
import SwiftProtoReflect

@main
struct StructDemo {
  static func main() throws {
    ExampleUtils.printHeader("Google Protobuf Struct Integration")

    try demonstrateBasicStructOperations()
    try demonstrateValueTypes()
    try demonstrateNestedStructures()
    try demonstrateStructOperations()
    try demonstrateRoundTripCompatibility()
    try demonstratePerformanceAndComplexity()

    ExampleUtils.printSuccess("Struct demo –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Å google.protobuf.Struct.")

    ExampleUtils.printNext([
      "–î–∞–ª–µ–µ –∏–∑—É—á–∏—Ç–µ: value-demo.swift - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
      "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ: any-demo.swift - type erasure –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: well-known-registry.swift - comprehensive demo",
    ])
  }

  // MARK: - Implementation Steps

  private static func demonstrateBasicStructOperations() throws {
    ExampleUtils.printStep(1, "Basic Struct Operations")

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let emptyStruct = StructHandler.StructValue()
    print("  üì¶ Empty struct: \(emptyStruct)")
    print("  üìè Fields count: \(emptyStruct.fields.count)")

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ Dictionary
    let userDict: [String: Any] = [
      "name": "John Doe",
      "age": 30,
      "email": "john.doe@example.com",
      "active": true,
      "score": 95.5,
    ]

    let userStruct = try StructHandler.StructValue(from: userDict)
    print("  üë§ User struct: \(userStruct)")
    print("  üìè Fields count: \(userStruct.fields.count)")

    // –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
    if let name = userStruct.getValue("name") {
      print("  üè∑  Name field: \(name)")
    }

    if let age = userStruct.getValue("age") {
      print("  üéÇ Age field: \(age)")
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π
    print("  üîç Contains 'name': \(userStruct.contains("name"))")
    print("  üîç Contains 'salary': \(userStruct.contains("salary"))")

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Dictionary
    let reconstructedDict = userStruct.toDictionary()
    print("  üîÑ Reconstructed dict keys: \(reconstructedDict.keys.sorted())")

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    print("  ‚úÖ Data integrity:")
    print("    Name match: \(reconstructedDict["name"] as? String == userDict["name"] as? String)")
    print("    Age match: \(reconstructedDict["age"] as? Double == Double(userDict["age"] as! Int))")
    print("    Email match: \(reconstructedDict["email"] as? String == userDict["email"] as? String)")
  }

  private static func demonstrateValueTypes() throws {
    ExampleUtils.printStep(2, "ValueValue Types Demonstration")

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ ValueValue
    let valueExamples: [(String, Any, StructHandler.ValueValue)] = [
      ("Null Value", NSNull(), .nullValue),
      ("String Value", "Hello, World!", .stringValue("Hello, World!")),
      ("Boolean True", true, .boolValue(true)),
      ("Boolean False", false, .boolValue(false)),
      ("Integer", 42, .numberValue(42.0)),
      ("Double", 3.14159, .numberValue(3.14159)),
      (
        "Array", ["apple", "banana", "cherry"],
        .listValue([.stringValue("apple"), .stringValue("banana"), .stringValue("cherry")])
      ),
    ]

    var typeResults: [[String: String]] = []

    for (description, originalValue, expectedValue) in valueExamples {
      do {
        let valueValue = try StructHandler.ValueValue(from: originalValue)
        let matches = valueValue == expectedValue
        let reconstructed = valueValue.toAny()

        typeResults.append([
          "Type": description,
          "Original": "\(originalValue)",
          "ValueValue": "\(valueValue)",
          "Match Expected": matches ? "‚úÖ YES" : "‚ùå NO",
          "Round-trip": "\(reconstructed)",
        ])
      }
      catch {
        typeResults.append([
          "Type": description,
          "Original": "\(originalValue)",
          "ValueValue": "ERROR",
          "Match Expected": "‚ùå ERROR",
          "Round-trip": "N/A",
        ])
      }
    }

    ExampleUtils.printDataTable(typeResults, title: "ValueValue Types")

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å —á–∏—Å–ª–∞–º–∏
    print("  üî¢ Number type handling:")
    let numberTypes: [Any] = [Int32(100), Int64(200), UInt32(300), UInt64(400), Float(5.5), Double(6.6)]
    for number in numberTypes {
      let valueValue = try StructHandler.ValueValue(from: number)
      print("    \(type(of: number)): \(number) -> \(valueValue)")
    }
  }

  private static func demonstrateNestedStructures() throws {
    ExampleUtils.printStep(3, "Nested Structures and Complex Data")

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let complexData: [String: Any] = [
      "user": [
        "personal": [
          "name": "Alice Johnson",
          "age": 28,
          "location": [
            "city": "San Francisco",
            "country": "USA",
            "coordinates": [37.7749, -122.4194],
          ],
        ],
        "professional": [
          "title": "Software Engineer",
          "skills": ["Swift", "Python", "JavaScript"],
          "experience": 5.5,
          "remote": true,
        ],
      ],
      "metadata": [
        "created": "2023-01-15T10:30:00Z",
        "version": 2,
        "tags": ["employee", "engineer", "remote-worker"],
      ],
    ]

    print("  üèó  Creating complex nested structure...")
    let complexStruct = try StructHandler.StructValue(from: complexData)
    print("  üì¶ Top-level fields: \(complexStruct.fields.keys.sorted())")

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    if let userValue = complexStruct.getValue("user"),
      case .structValue(let userStruct) = userValue
    {
      print("  üë§ User struct has \(userStruct.fields.count) fields")

      if let personalValue = userStruct.getValue("personal"),
        case .structValue(let personalStruct) = personalValue
      {
        print("  üë®‚Äçüíº Personal info:")
        if let nameValue = personalStruct.getValue("name"),
          case .stringValue(let name) = nameValue
        {
          print("    Name: \(name)")
        }

        if let locationValue = personalStruct.getValue("location"),
          case .structValue(let locationStruct) = locationValue
        {
          print("    Location fields: \(locationStruct.fields.keys.sorted())")

          if let coordsValue = locationStruct.getValue("coordinates"),
            case .listValue(let coords) = coordsValue
          {
            print("    Coordinates: \(coords)")
          }
        }
      }

      if let professionalValue = userStruct.getValue("professional"),
        case .structValue(let professionalStruct) = professionalValue
      {
        print("  üíº Professional info:")
        if let skillsValue = professionalStruct.getValue("skills"),
          case .listValue(let skills) = skillsValue
        {
          print("    Skills: \(skills)")
        }
      }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ round-trip
    print("  üîÑ Testing deep round-trip conversion...")
    let dynamicMessage = try StructHandler.createDynamic(from: complexStruct)
    let extractedStruct = try StructHandler.createSpecialized(from: dynamicMessage) as! StructHandler.StructValue
    let finalDict = extractedStruct.toDictionary()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—É–±–æ–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    let originalUser = complexData["user"] as! [String: Any]
    let originalPersonal = originalUser["personal"] as! [String: Any]
    let finalUser = finalDict["user"] as! [String: Any]
    let finalPersonal = finalUser["personal"] as! [String: Any]

    print("  ‚úÖ Deep integrity check:")
    print("    Original name: \(originalPersonal["name"] as! String)")
    print("    Final name: \(finalPersonal["name"] as! String)")
    print("    Names match: \(originalPersonal["name"] as! String == finalPersonal["name"] as! String)")
  }

  private static func demonstrateStructOperations() throws {
    ExampleUtils.printStep(4, "Struct Operations and Manipulation")

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let baseUser = try StructHandler.StructValue(from: [
      "name": "Bob Smith",
      "age": 25,
      "department": "Engineering",
    ])

    print("  üì¶ Base user: \(baseUser)")

    // Adding –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("  ‚ûï Adding operations:")
    let withEmail = baseUser.adding("email", value: .stringValue("bob.smith@company.com"))
    let withSalary = withEmail.adding("salary", value: .numberValue(85000.0))
    let withActive = withSalary.adding("active", value: .boolValue(true))

    print("    After adding email: \(withEmail.fields.keys.count) fields")
    print("    After adding salary: \(withSalary.fields.keys.count) fields")
    print("    After adding active: \(withActive.fields.keys.count) fields")
    print("    Original unchanged: \(baseUser.fields.keys.count) fields")

    // Removing –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("  ‚ûñ Removing operations:")
    let withoutAge = withActive.removing("age")
    let withoutDept = withoutAge.removing("department")

    print("    After removing age: \(withoutAge.fields.keys.count) fields")
    print("    After removing department: \(withoutDept.fields.keys.count) fields")
    print("    Final fields: \(withoutDept.fields.keys.sorted())")

    // Merging –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("  üîÄ Merging operations:")
    let profileData = try StructHandler.StructValue(from: [
      "age": 26,  // Override existing
      "city": "New York",  // New field
      "skills": ["Swift", "iOS", "macOS"],  // New field
      "manager": [  // Nested structure
        "name": "Sarah Wilson",
        "level": "Senior",
      ],
    ])

    let mergedUser = baseUser.merging(profileData)
    print("    Base user fields: \(baseUser.fields.keys.sorted())")
    print("    Profile data fields: \(profileData.fields.keys.sorted())")
    print("    Merged result fields: \(mergedUser.fields.keys.sorted())")

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ override –ø–æ–≤–µ–¥–µ–Ω–∏—è
    if let mergedAge = mergedUser.getValue("age"),
      let originalAge = baseUser.getValue("age")
    {
      print("    Age override: \(originalAge) -> \(mergedAge)")
    }
  }

  private static func demonstrateRoundTripCompatibility() throws {
    ExampleUtils.printStep(5, "Round-Trip Compatibility Testing")

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    let testCases: [(String, [String: Any])] = [
      (
        "Simple flat structure",
        [
          "name": "Test User",
          "count": 42,
          "enabled": true,
        ]
      ),
      (
        "Array heavy structure",
        [
          "numbers": [1, 2, 3, 4, 5],
          "strings": ["apple", "banana", "cherry"],
          "mixed": [true, 42, "text", 3.14],
        ]
      ),
      (
        "Deeply nested structure",
        [
          "level1": [
            "level2": [
              "level3": [
                "level4": "deep value"
              ]
            ]
          ]
        ]
      ),
      (
        "Mixed complexity",
        [
          "user": [
            "profile": ["name": "John", "age": 30],
            "preferences": ["theme": "dark", "notifications": true],
          ],
          "data": [1, 2, ["nested": "array"]],
          "metadata": NSNull(),
        ]
      ),
    ]

    var testResults: [[String: String]] = []
    var allTestsPassed = true

    for (testName, originalData) in testCases {
      do {
        // Round-trip: Dict -> StructValue -> DynamicMessage -> StructValue -> Dict
        let structValue1 = try StructHandler.StructValue(from: originalData)
        let dynamicMessage = try StructHandler.createDynamic(from: structValue1)
        let structValue2 = try StructHandler.createSpecialized(from: dynamicMessage) as! StructHandler.StructValue
        let resultData = structValue2.toDictionary()

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        let integrityCheck = try verifyDataIntegrity(original: originalData, result: resultData)

        testResults.append([
          "Test": testName,
          "Original Keys": "\(originalData.keys.count)",
          "Result Keys": "\(resultData.keys.count)",
          "Integrity": integrityCheck ? "‚úÖ PASS" : "‚ùå FAIL",
          "Status": "‚úÖ SUCCESS",
        ])

        if !integrityCheck {
          allTestsPassed = false
        }
      }
      catch {
        testResults.append([
          "Test": testName,
          "Original Keys": "\(originalData.keys.count)",
          "Result Keys": "ERROR",
          "Integrity": "‚ùå ERROR",
          "Status": "‚ùå FAILED",
        ])
        allTestsPassed = false
        print("    ‚ùå Error in \(testName): \(error)")
      }
    }

    ExampleUtils.printDataTable(testResults, title: "Round-Trip Compatibility Tests")

    print("  üèÜ Overall compatibility: \(allTestsPassed ? "‚úÖ EXCELLENT" : "‚ö†Ô∏è NEEDS ATTENTION")")
  }

  private static func demonstratePerformanceAndComplexity() throws {
    ExampleUtils.printStep(6, "Performance Analysis and Complex Scenarios")

    // Performance benchmarking
    print("  üöÄ Performance benchmarking:")

    let benchmarkData: [String: Any] = [
      "name": "Performance Test User",
      "data": Array(0..<100).map { "item_\($0)" },
      "nested": (0..<50).reduce(into: [String: Any]()) { dict, i in
        dict["field_\(i)"] = "value_\(i)"
      },
    ]

    let iterations = 100
    var times: [TimeInterval] = []

    for _ in 0..<iterations {
      let (_, time) = ExampleUtils.measureTime {
        let structValue = try! StructHandler.StructValue(from: benchmarkData)
        let message = try! StructHandler.createDynamic(from: structValue)
        let _ = try! StructHandler.createSpecialized(from: message)
      }
      times.append(time)
    }

    let avgTime = times.reduce(0, +) / Double(times.count)
    let minTime = times.min() ?? 0
    let maxTime = times.max() ?? 0

    ExampleUtils.printTiming("Average conversion (\(iterations) iterations)", time: avgTime)
    ExampleUtils.printTiming("Fastest conversion", time: minTime)
    ExampleUtils.printTiming("Slowest conversion", time: maxTime)

    let opsPerSecond = 1.0 / avgTime
    print("    üéØ Operations per second: \(String(format: "%.0f", opsPerSecond))")

    print("  üí° Performance insights:")
    print("    ‚Ä¢ google.protobuf.Struct –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö JSON-like –¥–∞–Ω–Ω—ã—Ö")
    print("    ‚Ä¢ Round-trip –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –¥–∞–∂–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
    print("    ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ª–∏–Ω–µ–π–Ω–æ —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö")
    print("    ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è real-time —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (< 1ms –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)")
  }

  // MARK: - Helper Methods

  private static func verifyDataIntegrity(original: [String: Any], result: [String: Any]) throws -> Bool {
    guard original.keys.count == result.keys.count else { return false }

    for key in original.keys {
      guard let originalValue = original[key],
        let resultValue = result[key]
      else { return false }

      if !valuesEqual(originalValue, resultValue) {
        return false
      }
    }

    return true
  }

  private static func valuesEqual(_ lhs: Any, _ rhs: Any) -> Bool {
    if lhs is NSNull && rhs is NSNull { return true }
    if let lhsString = lhs as? String, let rhsString = rhs as? String {
      return lhsString == rhsString
    }
    if let lhsBool = lhs as? Bool, let rhsBool = rhs as? Bool {
      return lhsBool == rhsBool
    }
    if let lhsNumber = lhs as? NSNumber, let rhsNumber = rhs as? NSNumber {
      return lhsNumber.doubleValue == rhsNumber.doubleValue
    }
    if let lhsArray = lhs as? [Any], let rhsArray = rhs as? [Any] {
      guard lhsArray.count == rhsArray.count else { return false }
      for (lhsItem, rhsItem) in zip(lhsArray, rhsArray) where !valuesEqual(lhsItem, rhsItem) {
        return false
      }
      return true
    }
    if let lhsDict = lhs as? [String: Any], let rhsDict = rhs as? [String: Any] {
      return (try? verifyDataIntegrity(original: lhsDict, result: rhsDict)) == true
    }

    return false
  }
}
