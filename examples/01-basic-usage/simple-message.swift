/**
 * üèó SwiftProtoReflect Example: Simple Complex Messages
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é, oneof –ø–æ–ª—è–º–∏ –∏ message —Ç–∏–ø–∞–º–∏
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: Nested Messages, OneOf Fields, Message Types, Default Values
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å: üîß –°—Ä–µ–¥–Ω–∏–π
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: < 10 —Å–µ–∫—É–Ω–¥
 * 
 * –ß—Ç–æ –∏–∑—É—á–∏—Ç–µ:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (nested messages)
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ oneof –ø–æ–ª–µ–π –¥–ª—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * - –†–∞–±–æ—Ç–∞ —Å message —Ç–∏–ø–∞–º–∏ –∏ typeName
 * - Default –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π
 * - –°–ª–æ–∂–Ω—ã–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ó–∞–ø—É—Å–∫: 
 *   swift run SimpleMessage
 *   make run-basic
 */

import Foundation
import SwiftProtoReflect
import ExampleUtils

@main
struct SimpleMessageExample {
    static func main() throws {
        ExampleUtils.printHeader("–°–ª–æ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∏ OneOf –ø–æ–ª—è")
        
        try step1_createNestedMessages()
        try step2_useOneOfFields()
        try step3_workWithMessageTypes()
        try step4_defaultValues()
        try step5_complexHierarchy()
        
        ExampleUtils.printSuccess("–í—ã –æ—Å–≤–æ–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö Protocol Buffers —Å–æ–æ–±—â–µ–Ω–∏–π!")
        
        ExampleUtils.printNext([
            "–°–ª–µ–¥—É—é—â–∏–π: basic-descriptors.swift - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: complex-messages.swift - –µ—â–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "–ò–∑—É—á–∏—Ç–µ: nested-messages.swift - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        ])
    }
    
    // MARK: - Implementation Steps
    
    private static func step1_createNestedMessages() throws {
        ExampleUtils.printStep(1, "–°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        let (userDescriptor, addressDescriptor, _) = try createNestedMessageStructure()
        let factory = MessageFactory()
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        var user = factory.createMessage(from: userDescriptor)
        var address = factory.createMessage(from: addressDescriptor)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Address
        try address.set("123 Main Street", forField: "street")
        try address.set("Springfield", forField: "city")
        try address.set("12345", forField: "postal_code")
        
        print("  üìç –°–æ–∑–¥–∞–Ω Address:")
        address.prettyPrint()
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ User
        try user.set("John Doe", forField: "name")
        try user.set("john.doe@example.com", forField: "email")
        try user.set(Int32(30), forField: "age")
        try user.set(address, forField: "address")
        
        print("\n  üë§ –°–æ–∑–¥–∞–Ω User —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º Address:")
        user.prettyPrint()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if let userAddress = try user.get(forField: "address") as? DynamicMessage {
            let street = try userAddress.get(forField: "street") as? String
            print("  üè† –£–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(street ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")")
        }
    }
    
    private static func step2_useOneOfFields() throws {
        ExampleUtils.printStep(2, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OneOf –ø–æ–ª–µ–π")
        
        let (messageDescriptor, _) = try createOneOfMessage()
        let factory = MessageFactory()
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã oneof
        print("  üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OneOf –ø–æ–ª–µ–π:")
        
        // –í–∞—Ä–∏–∞–Ω—Ç 1: contact_method = email
        var message1 = factory.createMessage(from: messageDescriptor)
        try message1.set("user@example.com", forField: "email")
        
        let hasEmail = try message1.hasValue(forField: "email")
        let hasPhone = try message1.hasValue(forField: "phone")
        
        print("    üìß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω email:")
        print("      - hasEmail: \(hasEmail)")
        print("      - hasPhone: \(hasPhone)")
        print("      - email: \(try message1.get(forField: "email") as? String ?? "nil")")
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: contact_method = phone (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç email)
        try message1.set("+1-555-123-4567", forField: "phone")
        
        let hasEmailAfter = try message1.hasValue(forField: "email")
        let hasPhoneAfter = try message1.hasValue(forField: "phone")
        
        print("    üìû –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω phone (–¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å email):")
        print("      - hasEmail: \(hasEmailAfter)")
        print("      - hasPhone: \(hasPhoneAfter)")
        print("      - phone: \(try message1.get(forField: "phone") as? String ?? "nil")")
        
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –¥—Ä—É–≥–æ–π oneof - notification_method
        try message1.set(true, forField: "push_enabled")
        let hasPush = try message1.hasValue(forField: "push_enabled")
        print("    üîî Notification method - push_enabled: \(hasPush)")
    }
    
    private static func step3_workWithMessageTypes() throws {
        ExampleUtils.printStep(3, "–†–∞–±–æ—Ç–∞ —Å message —Ç–∏–ø–∞–º–∏")
        
        let (companyDescriptor, departmentDescriptor, _) = try createCompanyStructure()
        let factory = MessageFactory()
        
        // –°–æ–∑–¥–∞–µ–º department
        var department = factory.createMessage(from: departmentDescriptor)
        try department.set("Engineering", forField: "name")
        try department.set(Int32(25), forField: "employee_count")
        
        print("  üè¢ –°–æ–∑–¥–∞–Ω Department:")
        department.prettyPrint()
        
        // –°–æ–∑–¥–∞–µ–º company —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º department
        var company = factory.createMessage(from: companyDescriptor)
        try company.set("TechCorp", forField: "name")
        try company.set("A leading technology company", forField: "description")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º department –∫–∞–∫ message –ø–æ–ª–µ
        try company.set(department, forField: "main_department")
        
        print("\n  üè≠ –°–æ–∑–¥–∞–Ω–∞ Company —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º Department:")
        company.prettyPrint()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ message –ø–æ–ª—é
        if let mainDept = try company.get(forField: "main_department") as? DynamicMessage {
            let deptName = try mainDept.get(forField: "name") as? String
            let employeeCount = try mainDept.get(forField: "employee_count") as? Int32
            
            ExampleUtils.printTable([
                "Department Name": deptName ?? "Unknown",
                "Employee Count": employeeCount?.description ?? "0"
            ], title: "Main Department Info")
        }
    }
    
    private static func step4_defaultValues() throws {
        ExampleUtils.printStep(4, "Default –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π")
        
        let (messageDescriptor, _) = try createMessageWithDefaults()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        print("  üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ default –∑–Ω–∞—á–µ–Ω–∏–π:")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å defaults –∏–ª–∏ nil)
        let statusBefore = try message.get(forField: "status") as? String
        let priorityBefore = try message.get(forField: "priority") as? Int32
        let activeBefore = try message.get(forField: "is_active") as? Bool
        
        print("    –î–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π:")
        print("      - status: \(statusBefore ?? "nil")")
        print("      - priority: \(priorityBefore?.description ?? "nil")")
        print("      - is_active: \(activeBefore?.description ?? "nil")")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        try message.set("pending", forField: "status")
        try message.set(Int32(5), forField: "priority")
        // is_active –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        let statusAfter = try message.get(forField: "status") as? String
        let priorityAfter = try message.get(forField: "priority") as? Int32
        let activeAfter = try message.get(forField: "is_active") as? Bool
        
        print("    –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        print("      - status: \(statusAfter ?? "nil")")
        print("      - priority: \(priorityAfter?.description ?? "nil")")
        print("      - is_active: \(activeAfter?.description ?? "nil") (default)")
    }
    
    private static func step5_complexHierarchy() throws {
        ExampleUtils.printStep(5, "–°–ª–æ–∂–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        let (blogDescriptor, postDescriptor, authorDescriptor, _) = try createBlogStructure()
        let factory = MessageFactory()
        
        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∞
        var author = factory.createMessage(from: authorDescriptor)
        try author.set("Jane Smith", forField: "name")
        try author.set("jane@example.com", forField: "email")
        try author.set("Senior Developer", forField: "bio")
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        var post = factory.createMessage(from: postDescriptor)
        try post.set("Introduction to SwiftProtoReflect", forField: "title")
        try post.set("This is a comprehensive guide...", forField: "content")
        try post.set(["swift", "protobuf", "ios"], forField: "tags")
        try post.set(author, forField: "author")
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥ —Å –ø–æ—Å—Ç–æ–º
        var blog = factory.createMessage(from: blogDescriptor)
        try blog.set("Tech Blog", forField: "name")
        try blog.set("A blog about technology", forField: "description")
        try blog.set([post], forField: "posts")
        
        print("  üìù –°–æ–∑–¥–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è Blog -> Post -> Author")
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        if let posts = try blog.get(forField: "posts") as? [DynamicMessage],
           let firstPost = posts.first {
            
            let postTitle = try firstPost.get(forField: "title") as? String
            print("  üì∞ –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: \(postTitle ?? "Untitled")")
            
            if let postAuthor = try firstPost.get(forField: "author") as? DynamicMessage {
                let authorName = try postAuthor.get(forField: "name") as? String
                let authorEmail = try postAuthor.get(forField: "email") as? String
                
                ExampleUtils.printTable([
                    "Post Title": postTitle ?? "Unknown",
                    "Author Name": authorName ?? "Unknown",
                    "Author Email": authorEmail ?? "Unknown"
                ], title: "Blog Post Details")
            }
            
            if let tags = try firstPost.get(forField: "tags") as? [String] {
                print("  üè∑  –¢–µ–≥–∏: \(tags.joined(separator: ", "))")
            }
        }
        
        ExampleUtils.printInfo("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é SwiftProtoReflect")
    }
    
    // MARK: - Helper Methods
    
    private static func createNestedMessageStructure() throws -> (MessageDescriptor, MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "user.proto", package: "example")
        
        // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Address
        var addressDescriptor = MessageDescriptor(name: "Address", parent: fileDescriptor)
        addressDescriptor.addField(FieldDescriptor(name: "street", number: 1, type: .string))
        addressDescriptor.addField(FieldDescriptor(name: "city", number: 2, type: .string))
        addressDescriptor.addField(FieldDescriptor(name: "postal_code", number: 3, type: .string))
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ User
        var userDescriptor = MessageDescriptor(name: "User", parent: fileDescriptor)
        userDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        userDescriptor.addField(FieldDescriptor(name: "email", number: 2, type: .string))
        userDescriptor.addField(FieldDescriptor(name: "age", number: 3, type: .int32))
        userDescriptor.addField(FieldDescriptor(
            name: "address",
            number: 4,
            type: .message,
            typeName: "example.Address"
        ))
        
        fileDescriptor.addMessage(addressDescriptor)
        fileDescriptor.addMessage(userDescriptor)
        
        return (userDescriptor, addressDescriptor, fileDescriptor)
    }
    
    private static func createOneOfMessage() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "contact.proto", package: "example")
        var messageDescriptor = MessageDescriptor(name: "Contact", parent: fileDescriptor)
        
        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        messageDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        
        // OneOf –≥—Ä—É–ø–ø–∞ 1: contact_method (email –ò–õ–ò phone)
        messageDescriptor.addField(FieldDescriptor(name: "email", number: 2, type: .string, oneofIndex: 0))
        messageDescriptor.addField(FieldDescriptor(name: "phone", number: 3, type: .string, oneofIndex: 0))
        
        // OneOf –≥—Ä—É–ø–ø–∞ 2: notification_method (push_enabled –ò–õ–ò sms_enabled)
        messageDescriptor.addField(FieldDescriptor(name: "push_enabled", number: 4, type: .bool, oneofIndex: 1))
        messageDescriptor.addField(FieldDescriptor(name: "sms_enabled", number: 5, type: .bool, oneofIndex: 1))
        
        fileDescriptor.addMessage(messageDescriptor)
        
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func createCompanyStructure() throws -> (MessageDescriptor, MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "company.proto", package: "example")
        
        // –°–æ–∑–¥–∞–µ–º Department —Å–æ–æ–±—â–µ–Ω–∏–µ
        var departmentDescriptor = MessageDescriptor(name: "Department", parent: fileDescriptor)
        departmentDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        departmentDescriptor.addField(FieldDescriptor(name: "employee_count", number: 2, type: .int32))
        
        // –°–æ–∑–¥–∞–µ–º Company —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message –ø–æ–ª–µ–º
        var companyDescriptor = MessageDescriptor(name: "Company", parent: fileDescriptor)
        companyDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        companyDescriptor.addField(FieldDescriptor(name: "description", number: 2, type: .string))
        companyDescriptor.addField(FieldDescriptor(
            name: "main_department",
            number: 3,
            type: .message,
            typeName: "example.Department"
        ))
        
        fileDescriptor.addMessage(departmentDescriptor)
        fileDescriptor.addMessage(companyDescriptor)
        
        return (companyDescriptor, departmentDescriptor, fileDescriptor)
    }
    
    private static func createMessageWithDefaults() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "defaults.proto", package: "example")
        var messageDescriptor = MessageDescriptor(name: "TaskInfo", parent: fileDescriptor)
        
        // –ü–æ–ª—è —Å potential default –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        messageDescriptor.addField(FieldDescriptor(
            name: "status",
            number: 1,
            type: .string,
            defaultValue: "new"
        ))
        messageDescriptor.addField(FieldDescriptor(
            name: "priority",
            number: 2,
            type: .int32,
            defaultValue: Int32(1)
        ))
        messageDescriptor.addField(FieldDescriptor(
            name: "is_active",
            number: 3,
            type: .bool,
            defaultValue: true
        ))
        
        fileDescriptor.addMessage(messageDescriptor)
        
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func createBlogStructure() throws -> (MessageDescriptor, MessageDescriptor, MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "blog.proto", package: "example")
        
        // Author —Å–æ–æ–±—â–µ–Ω–∏–µ
        var authorDescriptor = MessageDescriptor(name: "Author", parent: fileDescriptor)
        authorDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        authorDescriptor.addField(FieldDescriptor(name: "email", number: 2, type: .string))
        authorDescriptor.addField(FieldDescriptor(name: "bio", number: 3, type: .string))
        
        // Post —Å–æ–æ–±—â–µ–Ω–∏–µ
        var postDescriptor = MessageDescriptor(name: "Post", parent: fileDescriptor)
        postDescriptor.addField(FieldDescriptor(name: "title", number: 1, type: .string))
        postDescriptor.addField(FieldDescriptor(name: "content", number: 2, type: .string))
        postDescriptor.addField(FieldDescriptor(name: "tags", number: 3, type: .string, isRepeated: true))
        postDescriptor.addField(FieldDescriptor(
            name: "author",
            number: 4,
            type: .message,
            typeName: "example.Author"
        ))
        
        // Blog —Å–æ–æ–±—â–µ–Ω–∏–µ
        var blogDescriptor = MessageDescriptor(name: "Blog", parent: fileDescriptor)
        blogDescriptor.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        blogDescriptor.addField(FieldDescriptor(name: "description", number: 2, type: .string))
        blogDescriptor.addField(FieldDescriptor(
            name: "posts",
            number: 3,
            type: .message,
            typeName: "example.Post",
            isRepeated: true
        ))
        
        fileDescriptor.addMessage(authorDescriptor)
        fileDescriptor.addMessage(postDescriptor)
        fileDescriptor.addMessage(blogDescriptor)
        
        return (blogDescriptor, postDescriptor, authorDescriptor, fileDescriptor)
    }
}
