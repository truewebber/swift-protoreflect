/**
 * üöÄ SwiftProtoReflect Example: Hello World
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ Protocol Buffers —Å–æ–æ–±—â–µ–Ω–∏—è
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: FileDescriptor, MessageDescriptor, DynamicMessage, FieldDescriptor
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å: üî∞ –ù–∞—á–∞–ª—å–Ω—ã–π
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: < 5 —Å–µ–∫—É–Ω–¥
 * 
 * –ß—Ç–æ –∏–∑—É—á–∏—Ç–µ:
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ (FileDescriptor)
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—è–º–∏ (MessageDescriptor)
 * - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (DynamicMessage)
 * - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
 * - –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å TypeRegistry
 * 
 * –ó–∞–ø—É—Å–∫: 
 *   swift run HelloWorld
 */

import Foundation
import SwiftProtoReflect
import ExampleUtils

@main
struct HelloWorldExample {
    static func main() throws {
        ExampleUtils.printHeader("Hello World - –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å SwiftProtoReflect")
        
        try step1_createFileDescriptor()
        try step2_definePersonMessage()
        try step3_createMessageInstance()
        try step4_workWithData()
        try step5_useTypeRegistry()
        
        ExampleUtils.printSuccess("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ Protocol Buffers —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        
        ExampleUtils.printNext([
            "–î–∞–ª–µ–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ: swift run FieldTypes - –≤—Å–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π Protocol Buffers",
            "–ò–ª–∏ –∏–∑—É—á–∏—Ç–µ: simple-message.swift - —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: basic-descriptors.swift - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏"
        ])
    }
    
    // MARK: - Implementation Steps
    
    private static func step1_createFileDescriptor() throws {
        ExampleUtils.printStep(1, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞")
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä - –æ—Å–Ω–æ–≤—É –¥–ª—è –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Ç–∏–ø–æ–≤
        let fileDescriptor = FileDescriptor(name: "hello.proto", package: "example")
        print("  üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: \(fileDescriptor.name)")
        print("  üì¶ –ü–∞–∫–µ—Ç: \(fileDescriptor.package)")
        print("  üîó –ü–æ–ª–Ω–æ–µ –∏–º—è: \(fileDescriptor.name)")
    }
    
    private static func step2_definePersonMessage() throws {
        ExampleUtils.printStep(2, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Person")
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
        var fileDescriptor = FileDescriptor(name: "hello.proto", package: "example")
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è Person
        var personMessage = MessageDescriptor(name: "Person", parent: fileDescriptor)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        personMessage.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        personMessage.addField(FieldDescriptor(name: "age", number: 2, type: .int32))
        personMessage.addField(FieldDescriptor(name: "email", number: 3, type: .string))
        
        print("  üë§ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \(personMessage.name)")
        print("  üè∑  –ü–æ–ª—è: \(personMessage.fields.values.map { "\($0.name):\($0.type)" }.joined(separator: ", "))")
        print("  üìç –ü–æ–ª–Ω–æ–µ –∏–º—è: \(personMessage.fullName)")
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
        fileDescriptor.addMessage(personMessage)
        print("  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª–µ \(fileDescriptor.name)")
    }
    
    private static func step3_createMessageInstance() throws {
        ExampleUtils.printStep(3, "–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        // –í–æ—Å—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        let (messageDescriptor, _) = try createPersonMessageDescriptor()
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        let factory = MessageFactory()
        let person = factory.createMessage(from: messageDescriptor)
        
        print("  üèó  –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: \(person.descriptor.name)")
        print("  üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: \(person.descriptor.fields.count)")
        print("  üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: \(person.descriptor.fields.values.map { $0.name }.joined(separator: ", "))")
    }
    
    private static func step4_workWithData() throws {
        ExampleUtils.printStep(4, "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        let (messageDescriptor, _) = try createPersonMessageDescriptor()
        let factory = MessageFactory()
        var person = factory.createMessage(from: messageDescriptor)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        try person.set("John Doe", forField: "name")
        try person.set(Int32(30), forField: "age")
        try person.set("john.doe@example.com", forField: "email")
        
        print("  ‚úèÔ∏è  –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
        let name: String? = try person.get(forField: "name") as? String
        let age: Int32? = try person.get(forField: "age") as? Int32
        let email: String? = try person.get(forField: "email") as? String
        
        ExampleUtils.printTable([
            "–ò–º—è": name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            "–í–æ–∑—Ä–∞—Å—Ç": age?.description ?? "–Ω–µ —É–∫–∞–∑–∞–Ω",
            "Email": email ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"
        ], title: "–î–∞–Ω–Ω—ã–µ Person")
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π
        for fieldName in ["name", "age", "email"] {
            let hasValue = try person.hasValue(forField: fieldName)
            print("  \(hasValue ? "‚úÖ" : "‚ùå") –ü–æ–ª–µ '\(fieldName)': \(hasValue ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")")
        }
    }
    
    private static func step5_useTypeRegistry() throws {
        ExampleUtils.printStep(5, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TypeRegistry –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞–º–∏")
        
        let (_, fileDescriptor) = try createPersonMessageDescriptor()
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä —Ç–∏–ø–æ–≤
        let typeRegistry = TypeRegistry()
        try typeRegistry.registerFile(fileDescriptor)
        
        print("  üìÇ –§–∞–π–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ TypeRegistry")
        
        // –ò—â–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
        let foundMessage = typeRegistry.findMessage(named: "example.Person")
        
        if let found = foundMessage {
            print("  üîç –ù–∞–π–¥–µ–Ω —Ç–∏–ø: \(found.fullName)")
            print("  üìä –ü–æ–ª—è –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–∏–ø–µ: \(found.fields.count)")
        } else {
            print("  ‚ùå –¢–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ registry
        let registryFactory = MessageFactory()
        if let foundDescriptor = foundMessage {
            var message = registryFactory.createMessage(from: foundDescriptor)
            try message.set("Registry User", forField: "name")
            
            let retrievedName: String? = try message.get(forField: "name") as? String
            print("  üéØ –°–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ registry: –∏–º—è = '\(retrievedName ?? "nil")'")
        }
    }
    
    // MARK: - Helper Methods
    
    private static func createPersonMessageDescriptor() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "hello.proto", package: "example")
        var personMessage = MessageDescriptor(name: "Person", parent: fileDescriptor)
        
        personMessage.addField(FieldDescriptor(name: "name", number: 1, type: .string))
        personMessage.addField(FieldDescriptor(name: "age", number: 2, type: .int32))
        personMessage.addField(FieldDescriptor(name: "email", number: 3, type: .string))
        
        fileDescriptor.addMessage(personMessage)
        
        return (personMessage, fileDescriptor)
    }
}
