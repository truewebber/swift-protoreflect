/**
 * üéØ SwiftProtoReflect Example: Field Types Demo
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π Protocol Buffers
 * –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: FieldType, —Å–∫–∞–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã, repeated –ø–æ–ª—è, map –ø–æ–ª—è
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å: üî∞ –ù–∞—á–∞–ª—å–Ω—ã–π
 * –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: < 10 —Å–µ–∫—É–Ω–¥
 * 
 * –ß—Ç–æ –∏–∑—É—á–∏—Ç–µ:
 * - –í—Å–µ —Å–∫–∞–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã Protocol Buffers
 * - Repeated –ø–æ–ª—è (–º–∞—Å—Å–∏–≤—ã)
 * - Map –ø–æ–ª—è (key-value)
 * - Enum –ø–æ–ª—è
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
 * 
 * –ó–∞–ø—É—Å–∫: 
 *   swift run FieldTypes
 *   make run-basic
 */

import Foundation
import SwiftProtoReflect
import ExampleUtils

@main
struct FieldTypesExample {
    static func main() throws {
        ExampleUtils.printHeader("Protocol Buffers Field Types - –í—Å–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π")
        
        try step1_scalarTypes()
        try step2_repeatedFields()
        try step3_mapFields()
        try step4_enumFields()
        try step5_validationDemo()
        
        ExampleUtils.printSuccess("–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π Protocol Buffers!")
        
        ExampleUtils.printNext([
            "–°–ª–µ–¥—É—é—â–∏–π: simple-message.swift - —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            "–¢–∞–∫–∂–µ –∏–∑—É—á–∏—Ç–µ: basic-descriptors.swift - —Ä–∞–±–æ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏",
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ: nested-messages.swift - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        ])
    }
    
    // MARK: - Implementation Steps
    
    private static func step1_scalarTypes() throws {
        ExampleUtils.printStep(1, "–°–∫–∞–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã Protocol Buffers")
        
        let (messageDescriptor, _) = try createAllTypesMessage()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤
        try message.set(42.5, forField: "double_field")        // double
        try message.set(Float(3.14), forField: "float_field")  // float
        try message.set(Int32(100), forField: "int32_field")   // int32
        try message.set(Int64(1000), forField: "int64_field")  // int64
        try message.set(UInt32(200), forField: "uint32_field") // uint32
        try message.set(UInt64(2000), forField: "uint64_field") // uint64
        try message.set(Int32(-50), forField: "sint32_field")  // sint32 (ZigZag)
        try message.set(Int64(-500), forField: "sint64_field") // sint64 (ZigZag)
        try message.set(UInt32(300), forField: "fixed32_field") // fixed32
        try message.set(UInt64(3000), forField: "fixed64_field") // fixed64
        try message.set(Int32(-75), forField: "sfixed32_field") // sfixed32
        try message.set(Int64(-750), forField: "sfixed64_field") // sfixed64
        try message.set(true, forField: "bool_field")          // bool
        try message.set("Hello Protocol Buffers!", forField: "string_field") // string
        try message.set(Data("Binary data".utf8), forField: "bytes_field") // bytes
        
        print("  ‚úÖ –í—Å–µ —Å–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        // –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è - —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
        let scalarData: [String: Any] = [
            "double": try message.get(forField: "double_field") as? Double ?? 0,
            "float": try message.get(forField: "float_field") as? Float ?? 0,
            "int32": try message.get(forField: "int32_field") as? Int32 ?? 0,
            "int64": try message.get(forField: "int64_field") as? Int64 ?? 0,
            "uint32": try message.get(forField: "uint32_field") as? UInt32 ?? 0,
            "uint64": try message.get(forField: "uint64_field") as? UInt64 ?? 0,
        ]
        
        let moreScalarData: [String: Any] = [
            "sint32": try message.get(forField: "sint32_field") as? Int32 ?? 0,
            "sint64": try message.get(forField: "sint64_field") as? Int64 ?? 0,
            "bool": try message.get(forField: "bool_field") as? Bool ?? false,
            "string": try message.get(forField: "string_field") as? String ?? ""
        ]
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        var allScalarData = scalarData
        for (key, value) in moreScalarData {
            allScalarData[key] = value
        }
        
        ExampleUtils.printTable(allScalarData, title: "–°–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        if let bytesData = try message.get(forField: "bytes_field") as? Data {
            let bytesString = String(data: bytesData, encoding: .utf8) ?? "binary"
            print("  üì¶ bytes_field: \(bytesString) (\(bytesData.count) bytes)")
        }
    }
    
    private static func step2_repeatedFields() throws {
        ExampleUtils.printStep(2, "Repeated –ø–æ–ª—è (–º–∞—Å—Å–∏–≤—ã)")
        
        let (messageDescriptor, _) = try createRepeatedFieldsMessage()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º repeated –ø–æ–ª—è
        try message.set([Int32(1), Int32(2), Int32(3), Int32(4), Int32(5)], forField: "repeated_int32")
        try message.set(["apple", "banana", "cherry", "date"], forField: "repeated_string")
        try message.set([true, false, true, false], forField: "repeated_bool")
        try message.set([1.1, 2.2, 3.3], forField: "repeated_double")
        
        print("  ‚úÖ Repeated –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        // –ß–∏—Ç–∞–µ–º repeated –ø–æ–ª—è
        if let numbers = try message.get(forField: "repeated_int32") as? [Int32] {
            print("  üî¢ repeated_int32: \(numbers)")
        }
        
        if let strings = try message.get(forField: "repeated_string") as? [String] {
            print("  üìù repeated_string: \(strings)")
        }
        
        if let bools = try message.get(forField: "repeated_bool") as? [Bool] {
            print("  ‚òëÔ∏è  repeated_bool: \(bools)")
        }
        
        if let doubles = try message.get(forField: "repeated_double") as? [Double] {
            print("  üîÄ repeated_double: \(doubles)")
        }
        
        let totalElements = (try? message.get(forField: "repeated_int32") as? [Int32])?.count ?? 0
        print("  üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ repeated_int32: \(totalElements)")
    }
    
    private static func step3_mapFields() throws {
        ExampleUtils.printStep(3, "Map –ø–æ–ª—è (key-value) - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        
        let (messageDescriptor, _) = try createMapFieldsMessage()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        // –ü–æ—Å–∫–æ–ª—å–∫—É Map –ø–æ–ª—è —Ç—Ä–µ–±—É—é—Ç —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Protocol Buffers,
        // –ø–æ–∫–∞–∂–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        try message.set("key1=value1,key2=value2,key3=value3", forField: "map_string_int32")
        try message.set("10=ten,20=twenty,30=thirty", forField: "map_int32_string")
        try message.set("enabled=true,disabled=false", forField: "map_string_bool")
        
        print("  ‚úÖ Map-like –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)")
        
        // –ß–∏—Ç–∞–µ–º map-like –ø–æ–ª—è
        if let stringIntMap = try message.get(forField: "map_string_int32") as? String {
            print("  üóù  map_string_int32: \(stringIntMap)")
        }
        
        if let intStringMap = try message.get(forField: "map_int32_string") as? String {
            print("  üîë map_int32_string: \(intStringMap)")
        }
        
        if let stringBoolMap = try message.get(forField: "map_string_bool") as? String {
            print("  ‚úÖ map_string_bool: \(stringBoolMap)")
        }
        
        ExampleUtils.printInfo("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞—Å—Ç–æ—è—â–∏–µ Map –ø–æ–ª—è —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤")
    }
    
    private static func step4_enumFields() throws {
        ExampleUtils.printStep(4, "Enum –ø–æ–ª—è")
        
        let (messageDescriptor, fileDescriptor) = try createEnumFieldsMessage()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        // Enum –≤ Protocol Buffers –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ int32
        try message.set(Int32(1), forField: "status") // ACTIVE = 1
        try message.set(Int32(2), forField: "priority") // HIGH = 2
        
        print("  ‚úÖ Enum –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        // –ß–∏—Ç–∞–µ–º enum –ø–æ–ª—è
        if let status = try message.get(forField: "status") as? Int32 {
            let statusName = getStatusName(status)
            print("  üìä status: \(status) (\(statusName))")
        }
        
        if let priority = try message.get(forField: "priority") as? Int32 {
            let priorityName = getPriorityName(priority)
            print("  ‚ö° priority: \(priority) (\(priorityName))")
        }
        
        // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ enum –∑–Ω–∞—á–µ–Ω–∏—è
        if let statusEnum = fileDescriptor.enums.values.first(where: { $0.name == "Status" }) {
            print("  üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Status –∑–Ω–∞—á–µ–Ω–∏—è:")
            for value in statusEnum.allValues() {
                print("    \(value.name) = \(value.number)")
            }
        }
    }
    
    private static func step5_validationDemo() throws {
        ExampleUtils.printStep(5, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫")
        
        let (messageDescriptor, _) = try createAllTypesMessage()
        let factory = MessageFactory()
        var message = factory.createMessage(from: messageDescriptor)
        
        print("  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:")
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
        do {
            try message.set("Valid string", forField: "string_field")
            print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø string: OK")
        } catch {
            print("  ‚ùå –û—à–∏–±–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º: \(error)")
        }
        
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π)
        do {
            try message.set(123, forField: "string_field") // int –≤–º–µ—Å—Ç–æ string
            print("  ‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å int –≤ string –ø–æ–ª–µ: –ø—Ä–∏–Ω—è—Ç–æ (–≤–æ–∑–º–æ–∂–Ω–∞ –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)")
        } catch {
            print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: \(error)")
        }
        
        // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
        do {
            try message.set("test", forField: "nonexistent_field")
            print("  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ")
        } catch {
            print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ")
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
        print("\n  üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –ø–æ–ª–µ–π:")
        let fieldsToShow = Array(messageDescriptor.fields.values.prefix(5))
        for field in fieldsToShow {
            print("    \(field.name): \(field.type)")
        }
    }
    
    // MARK: - Helper Methods
    
    private static func createAllTypesMessage() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "types.proto", package: "example")
        var messageDescriptor = MessageDescriptor(name: "AllTypes", parent: fileDescriptor)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∫–∞–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã
        messageDescriptor.addField(FieldDescriptor(name: "double_field", number: 1, type: .double))
        messageDescriptor.addField(FieldDescriptor(name: "float_field", number: 2, type: .float))
        messageDescriptor.addField(FieldDescriptor(name: "int32_field", number: 3, type: .int32))
        messageDescriptor.addField(FieldDescriptor(name: "int64_field", number: 4, type: .int64))
        messageDescriptor.addField(FieldDescriptor(name: "uint32_field", number: 5, type: .uint32))
        messageDescriptor.addField(FieldDescriptor(name: "uint64_field", number: 6, type: .uint64))
        messageDescriptor.addField(FieldDescriptor(name: "sint32_field", number: 7, type: .sint32))
        messageDescriptor.addField(FieldDescriptor(name: "sint64_field", number: 8, type: .sint64))
        messageDescriptor.addField(FieldDescriptor(name: "fixed32_field", number: 9, type: .fixed32))
        messageDescriptor.addField(FieldDescriptor(name: "fixed64_field", number: 10, type: .fixed64))
        messageDescriptor.addField(FieldDescriptor(name: "sfixed32_field", number: 11, type: .sfixed32))
        messageDescriptor.addField(FieldDescriptor(name: "sfixed64_field", number: 12, type: .sfixed64))
        messageDescriptor.addField(FieldDescriptor(name: "bool_field", number: 13, type: .bool))
        messageDescriptor.addField(FieldDescriptor(name: "string_field", number: 14, type: .string))
        messageDescriptor.addField(FieldDescriptor(name: "bytes_field", number: 15, type: .bytes))
        
        fileDescriptor.addMessage(messageDescriptor)
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func createRepeatedFieldsMessage() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "repeated.proto", package: "example")
        var messageDescriptor = MessageDescriptor(name: "RepeatedTypes", parent: fileDescriptor)
        
        messageDescriptor.addField(FieldDescriptor(name: "repeated_int32", number: 1, type: .int32, isRepeated: true))
        messageDescriptor.addField(FieldDescriptor(name: "repeated_string", number: 2, type: .string, isRepeated: true))
        messageDescriptor.addField(FieldDescriptor(name: "repeated_bool", number: 3, type: .bool, isRepeated: true))
        messageDescriptor.addField(FieldDescriptor(name: "repeated_double", number: 4, type: .double, isRepeated: true))
        
        fileDescriptor.addMessage(messageDescriptor)
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func createMapFieldsMessage() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "maps.proto", package: "example")
        var messageDescriptor = MessageDescriptor(name: "MapTypes", parent: fileDescriptor)
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è map –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ string –ø–æ–ª—è
        messageDescriptor.addField(FieldDescriptor(name: "map_string_int32", number: 1, type: .string))
        messageDescriptor.addField(FieldDescriptor(name: "map_int32_string", number: 2, type: .string))
        messageDescriptor.addField(FieldDescriptor(name: "map_string_bool", number: 3, type: .string))
        
        fileDescriptor.addMessage(messageDescriptor)
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func createEnumFieldsMessage() throws -> (MessageDescriptor, FileDescriptor) {
        var fileDescriptor = FileDescriptor(name: "enums.proto", package: "example")
        
        // –°–æ–∑–¥–∞–µ–º enum Status
        var statusEnum = EnumDescriptor(name: "Status", parent: fileDescriptor)
        statusEnum.addValue(EnumDescriptor.EnumValue(name: "UNKNOWN", number: 0))
        statusEnum.addValue(EnumDescriptor.EnumValue(name: "ACTIVE", number: 1))
        statusEnum.addValue(EnumDescriptor.EnumValue(name: "INACTIVE", number: 2))
        
        // –°–æ–∑–¥–∞–µ–º enum Priority
        var priorityEnum = EnumDescriptor(name: "Priority", parent: fileDescriptor)
        priorityEnum.addValue(EnumDescriptor.EnumValue(name: "LOW", number: 0))
        priorityEnum.addValue(EnumDescriptor.EnumValue(name: "MEDIUM", number: 1))
        priorityEnum.addValue(EnumDescriptor.EnumValue(name: "HIGH", number: 2))
        
        fileDescriptor.addEnum(statusEnum)
        fileDescriptor.addEnum(priorityEnum)
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å enum –ø–æ–ª—è–º–∏
        var messageDescriptor = MessageDescriptor(name: "EnumMessage", parent: fileDescriptor)
        messageDescriptor.addField(FieldDescriptor(name: "status", number: 1, type: .int32)) // enum –∫–∞–∫ int32
        messageDescriptor.addField(FieldDescriptor(name: "priority", number: 2, type: .int32)) // enum –∫–∞–∫ int32
        
        fileDescriptor.addMessage(messageDescriptor)
        return (messageDescriptor, fileDescriptor)
    }
    
    private static func getStatusName(_ value: Int32) -> String {
        switch value {
        case 0: return "UNKNOWN"
        case 1: return "ACTIVE"  
        case 2: return "INACTIVE"
        default: return "INVALID"
        }
    }
    
    private static func getPriorityName(_ value: Int32) -> String {
        switch value {
        case 0: return "LOW"
        case 1: return "MEDIUM"
        case 2: return "HIGH"
        default: return "INVALID"
        }
    }
}
