//
// BinaryDeserializationTests.swift
//
// –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–Ω–∞—Ä–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Protocol Buffers
//
// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ø–ª–∞–Ω–∞:
// - Test-BIN-006: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö C++ protoc
// - Test-BIN-007: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
// - Test-BIN-008: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫)
// - Test-BIN-009: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

import XCTest

@testable import SwiftProtoReflect

final class BinaryDeserializationTests: XCTestCase {
  
  var fileDescriptor: FileDescriptor!
  var messageFactory: MessageFactory!
  var serializer: BinarySerializer!
  var deserializer: BinaryDeserializer!
  
  override func setUp() {
    super.setUp()
    
    fileDescriptor = FileDescriptor(name: "test_deserialization.proto", package: "test.deserialization")
    messageFactory = MessageFactory()
    serializer = BinarySerializer()
    deserializer = BinaryDeserializer()
  }
  
  override func tearDown() {
    fileDescriptor = nil
    messageFactory = nil
    serializer = nil
    deserializer = nil
    super.tearDown()
  }
  
  // MARK: - Round-trip Tests for Scalar Types (Test-BIN-006)
  
  func testRoundTripAllScalarTypes() throws {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å–∫–∞–ª—è—Ä–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    var scalarMessage = MessageDescriptor(name: "ScalarMessage", parent: fileDescriptor)
    
    scalarMessage.addField(FieldDescriptor(name: "double_field", number: 1, type: .double))
    scalarMessage.addField(FieldDescriptor(name: "float_field", number: 2, type: .float))
    scalarMessage.addField(FieldDescriptor(name: "int32_field", number: 3, type: .int32))
    scalarMessage.addField(FieldDescriptor(name: "int64_field", number: 4, type: .int64))
    scalarMessage.addField(FieldDescriptor(name: "uint32_field", number: 5, type: .uint32))
    scalarMessage.addField(FieldDescriptor(name: "uint64_field", number: 6, type: .uint64))
    scalarMessage.addField(FieldDescriptor(name: "sint32_field", number: 7, type: .sint32))
    scalarMessage.addField(FieldDescriptor(name: "sint64_field", number: 8, type: .sint64))
    scalarMessage.addField(FieldDescriptor(name: "fixed32_field", number: 9, type: .fixed32))
    scalarMessage.addField(FieldDescriptor(name: "fixed64_field", number: 10, type: .fixed64))
    scalarMessage.addField(FieldDescriptor(name: "sfixed32_field", number: 11, type: .sfixed32))
    scalarMessage.addField(FieldDescriptor(name: "sfixed64_field", number: 12, type: .sfixed64))
    scalarMessage.addField(FieldDescriptor(name: "bool_field", number: 13, type: .bool))
    scalarMessage.addField(FieldDescriptor(name: "string_field", number: 14, type: .string))
    scalarMessage.addField(FieldDescriptor(name: "bytes_field", number: 15, type: .bytes))
    
    fileDescriptor.addMessage(scalarMessage)
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let originalValues: [String: Any] = [
      "double_field": 3.14159,
      "float_field": Float(2.718),
      "int32_field": Int32(-42),
      "int64_field": Int64(-9223372036854775000),
      "uint32_field": UInt32(4294967000),  // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      "uint64_field": UInt64(18446744073709551000),  // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      "sint32_field": Int32(-2147483000),  // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      "sint64_field": Int64(-9223372036854775000),
      "fixed32_field": UInt32(123456789),
      "fixed64_field": UInt64(987654321012345),
      "sfixed32_field": Int32(-123456789),
      "sfixed64_field": Int64(-987654321012345),
      "bool_field": true,
      "string_field": "Hello, ‰∏ñÁïå!",
      "bytes_field": Data([0x01, 0x02, 0x03, 0xFF, 0xAB])
    ]
    
    // Round-trip —Ç–µ—Å—Ç
    let originalMessage = try messageFactory.createMessage(from: scalarMessage, with: originalValues)
    let serializedData = try serializer.serialize(originalMessage)
    let deserializedMessage = try deserializer.deserialize(serializedData, using: scalarMessage)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
    XCTAssertEqual(try deserializedMessage.get(forField: "double_field") as? Double, 3.14159)
    XCTAssertEqual(try deserializedMessage.get(forField: "float_field") as? Float, Float(2.718))
    XCTAssertEqual(try deserializedMessage.get(forField: "int32_field") as? Int32, Int32(-42))
    XCTAssertEqual(try deserializedMessage.get(forField: "int64_field") as? Int64, Int64(-9223372036854775000))
    XCTAssertEqual(try deserializedMessage.get(forField: "uint32_field") as? UInt32, UInt32(4294967000))
    XCTAssertEqual(try deserializedMessage.get(forField: "uint64_field") as? UInt64, UInt64(18446744073709551000))
    XCTAssertEqual(try deserializedMessage.get(forField: "sint32_field") as? Int32, Int32(-2147483000))
    XCTAssertEqual(try deserializedMessage.get(forField: "sint64_field") as? Int64, Int64(-9223372036854775000))
    XCTAssertEqual(try deserializedMessage.get(forField: "fixed32_field") as? UInt32, UInt32(123456789))
    XCTAssertEqual(try deserializedMessage.get(forField: "fixed64_field") as? UInt64, UInt64(987654321012345))
    XCTAssertEqual(try deserializedMessage.get(forField: "sfixed32_field") as? Int32, Int32(-123456789))
    XCTAssertEqual(try deserializedMessage.get(forField: "sfixed64_field") as? Int64, Int64(-987654321012345))
    XCTAssertEqual(try deserializedMessage.get(forField: "bool_field") as? Bool, true)
    XCTAssertEqual(try deserializedMessage.get(forField: "string_field") as? String, "Hello, ‰∏ñÁïå!")
    XCTAssertEqual(try deserializedMessage.get(forField: "bytes_field") as? Data, Data([0x01, 0x02, 0x03, 0xFF, 0xAB]))
  }
  
  func testRoundTripDoubleValue() throws {
    var message = MessageDescriptor(name: "DoubleMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "value", number: 1, type: .double))
    fileDescriptor.addMessage(message)
    
    let original = try messageFactory.createMessage(from: message, with: ["value": 3.14159])
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "value") as? Double, 3.14159)
  }
  
  func testRoundTripBoolValues() throws {
    var message = MessageDescriptor(name: "BoolMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "value", number: 1, type: .bool))
    fileDescriptor.addMessage(message)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º true
    let trueMessage = try messageFactory.createMessage(from: message, with: ["value": true])
    let trueData = try serializer.serialize(trueMessage)
    let deserializedTrue = try deserializer.deserialize(trueData, using: message)
    XCTAssertEqual(try deserializedTrue.get(forField: "value") as? Bool, true)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º false
    let falseMessage = try messageFactory.createMessage(from: message, with: ["value": false])
    let falseData = try serializer.serialize(falseMessage)
    let deserializedFalse = try deserializer.deserialize(falseData, using: message)
    XCTAssertEqual(try deserializedFalse.get(forField: "value") as? Bool, false)
  }
  
  func testRoundTripStringValues() throws {
    var message = MessageDescriptor(name: "StringMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "value", number: 1, type: .string))
    fileDescriptor.addMessage(message)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    let testStrings = [
      "Hello World",
      "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!",
      "‰Ω†Â•Ω‰∏ñÁïå",
      "üåçüöÄ‚ú®",
      "",
      "Multiple\nLine\nString"
    ]
    
    for testString in testStrings {
      let original = try messageFactory.createMessage(from: message, with: ["value": testString])
      let data = try serializer.serialize(original)
      let deserialized = try deserializer.deserialize(data, using: message)
      XCTAssertEqual(try deserialized.get(forField: "value") as? String, testString)
    }
  }
  
  func testRoundTripBytesValues() throws {
    var message = MessageDescriptor(name: "BytesMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "value", number: 1, type: .bytes))
    fileDescriptor.addMessage(message)
    
    let testBytes = [
      Data(),  // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      Data([0x01]),  // –û–¥–∏–Ω –±–∞–π—Ç
      Data([0x01, 0x02, 0x03, 0xFF, 0xAB]),  // –ù–µ—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç–æ–≤
      Data(repeating: 0xAA, count: 1000)  // –ë–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤
    ]
    
    for bytes in testBytes {
      let original = try messageFactory.createMessage(from: message, with: ["value": bytes])
      let data = try serializer.serialize(original)
      let deserialized = try deserializer.deserialize(data, using: message)
      XCTAssertEqual(try deserialized.get(forField: "value") as? Data, bytes)
    }
  }
  
  // MARK: - ZigZag Decoding Tests
  
  func testZigZagDecoding() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º ZigZag –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è sint32
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(0), 0)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(1), -1)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(2), 1)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(3), -2)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(4294967294), 2147483647)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode32(4294967295), -2147483648)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º ZigZag –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è sint64 (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(0), 0)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(1), -1)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(2), 1)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(3), -2)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(200), 100)
    XCTAssertEqual(BinaryDeserializer.zigzagDecode64(201), -101)
  }
  
  func testRoundTripSintValues() throws {
    var message = MessageDescriptor(name: "SintMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "sint32_field", number: 1, type: .sint32))
    message.addField(FieldDescriptor(name: "sint64_field", number: 2, type: .sint64))
    fileDescriptor.addMessage(message)
    
    let values: [String: Any] = [
      "sint32_field": Int32(-1),
      "sint64_field": Int64(-1000)
    ]
    
    let original = try messageFactory.createMessage(from: message, with: values)
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "sint32_field") as? Int32, Int32(-1))
    XCTAssertEqual(try deserialized.get(forField: "sint64_field") as? Int64, Int64(-1000))
  }
  
  // MARK: - Repeated Fields Tests
  
  func testRoundTripRepeatedFields() throws {
    var message = MessageDescriptor(name: "RepeatedMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "strings", number: 1, type: .string, isRepeated: true))
    message.addField(FieldDescriptor(name: "numbers", number: 2, type: .int32, isRepeated: true))
    fileDescriptor.addMessage(message)
    
    let values: [String: Any] = [
      "strings": ["hello", "world", "test"],
      "numbers": [Int32(1), Int32(2), Int32(3), Int32(4), Int32(5)]
    ]
    
    let original = try messageFactory.createMessage(from: message, with: values)
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "strings") as? [String], ["hello", "world", "test"])
    XCTAssertEqual(try deserialized.get(forField: "numbers") as? [Int32], [Int32(1), Int32(2), Int32(3), Int32(4), Int32(5)])
  }
  
  func testRoundTripPackedRepeatedFields() throws {
    var message = MessageDescriptor(name: "PackedMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "values", number: 1, type: .int32, isRepeated: true))
    fileDescriptor.addMessage(message)
    
    let values: [String: Any] = [
      "values": [Int32(1), Int32(2), Int32(3), Int32(4), Int32(5)]
    ]
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å packed encoding
    let packedSerializer = BinarySerializer(options: SerializationOptions(usePackedRepeated: true))
    
    let original = try messageFactory.createMessage(from: message, with: values)
    let data = try packedSerializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "values") as? [Int32], [Int32(1), Int32(2), Int32(3), Int32(4), Int32(5)])
  }
  
  // MARK: - Map Fields Tests
  
  func testRoundTripMapFields() throws {
    let keyFieldInfo = KeyFieldInfo(name: "key", number: 1, type: .string)
    let valueFieldInfo = ValueFieldInfo(name: "value", number: 2, type: .int32)
    let mapEntryInfo = MapEntryInfo(keyFieldInfo: keyFieldInfo, valueFieldInfo: valueFieldInfo)
    
    var message = MessageDescriptor(name: "MapMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(
      name: "string_to_int",
      number: 1,
      type: .message,
      typeName: "string_to_int_entry",
      isMap: true,
      mapEntryInfo: mapEntryInfo
    ))
    fileDescriptor.addMessage(message)
    
    let mapData: [String: Int32] = [
      "first": 1,
      "second": 2,
      "third": 3
    ]
    
    let original = try messageFactory.createMessage(from: message, with: ["string_to_int": mapData])
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    let deserializedMap = try deserialized.get(forField: "string_to_int") as? [String: Int32]
    XCTAssertEqual(deserializedMap?.count, 3)
    XCTAssertEqual(deserializedMap?["first"], 1)
    XCTAssertEqual(deserializedMap?["second"], 2)
    XCTAssertEqual(deserializedMap?["third"], 3)
  }
  
  // MARK: - Enum Tests
  
  func testRoundTripEnumField() throws {
    // –°–æ–∑–¥–∞–µ–º enum
    var enumDescriptor = EnumDescriptor(name: "Status", parent: fileDescriptor)
    enumDescriptor.addValue(EnumDescriptor.EnumValue(name: "UNKNOWN", number: 0))
    enumDescriptor.addValue(EnumDescriptor.EnumValue(name: "ACTIVE", number: 1))
    enumDescriptor.addValue(EnumDescriptor.EnumValue(name: "INACTIVE", number: 2))
    fileDescriptor.addEnum(enumDescriptor)
    
    var message = MessageDescriptor(name: "EnumMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(
      name: "status",
      number: 1,
      type: .enum,
      typeName: enumDescriptor.fullName
    ))
    fileDescriptor.addMessage(message)
    
    let original = try messageFactory.createMessage(from: message, with: ["status": Int32(1)])
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "status") as? Int32, Int32(1))
  }
  
  // MARK: - Unknown Fields Tests (Test-BIN-007)
  
  func testDeserializationWithUnknownFields() throws {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –Ω–æ–º–µ—Ä 1 –∏ 10
    var originalMessage = MessageDescriptor(name: "OriginalMessage", parent: fileDescriptor)
    originalMessage.addField(FieldDescriptor(name: "known_field", number: 1, type: .string))
    originalMessage.addField(FieldDescriptor(name: "unknown_field", number: 10, type: .int32))  // –≠—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º"
    fileDescriptor.addMessage(originalMessage)
    
    // –°–æ–∑–¥–∞–µ–º "–Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é" —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—è 10
    var newMessage = MessageDescriptor(name: "NewMessage", parent: fileDescriptor)
    newMessage.addField(FieldDescriptor(name: "known_field", number: 1, type: .string))
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å –ø–æ–ª–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    let fullMessage = try messageFactory.createMessage(from: originalMessage, with: [
      "known_field": "test",
      "unknown_field": Int32(42)
    ])
    let data = try serializer.serialize(fullMessage)
    
    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å —É—Ä–µ–∑–∞–Ω–Ω—ã–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–º (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    let partialMessage = try deserializer.deserialize(data, using: newMessage)
    
    XCTAssertEqual(try partialMessage.get(forField: "known_field") as? String, "test")
    XCTAssertThrowsError(try partialMessage.get(forField: "unknown_field"))
  }
  
  // MARK: - Error Handling Tests (Test-BIN-008)
  
  func testDeserializationErrorHandling() {
    // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    var emptyMessage = MessageDescriptor(name: "EmptyMessage", parent: fileDescriptor)
    emptyMessage.addField(FieldDescriptor(name: "field", number: 1, type: .int32))  // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ int32 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è tag 0x08
    
    let emptyData = Data()
    XCTAssertNoThrow(try deserializer.deserialize(emptyData, using: emptyMessage))
    
    // –¢–µ—Å—Ç —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (tag –¥–ª—è –ø–æ–ª—è 1, wire type varint, –Ω–æ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)
    let truncatedData = Data([0x08])  // Tag –¥–ª—è –ø–æ–ª—è 1, wire type 0 (varint), –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö varint
    XCTAssertThrowsError(try deserializer.deserialize(truncatedData, using: emptyMessage)) { error in
      XCTAssertTrue(error is DeserializationError)
      if case .truncatedVarint = error as? DeserializationError {
        // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
      } else {
        XCTFail("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ truncatedVarint, –ø–æ–ª—É—á–µ–Ω–∞: \(error)")
      }
    }
  }
  
  func testInvalidUTF8String() throws {
    var message = MessageDescriptor(name: "StringMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "value", number: 1, type: .string))
    fileDescriptor.addMessage(message)
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π UTF-8 —Å—Ç—Ä–æ–∫–æ–π –≤—Ä—É—á–Ω—É—é
    var invalidData = Data()
    invalidData.append(0x0A)  // Tag –¥–ª—è –ø–æ–ª—è 1, wire type 2 (length-delimited)
    invalidData.append(0x02)  // –î–ª–∏–Ω–∞ 2 –±–∞–π—Ç–∞
    invalidData.append(0xFF)  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π UTF-8 –±–∞–π—Ç
    invalidData.append(0xFE)  // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π UTF-8 –±–∞–π—Ç
    
    XCTAssertThrowsError(try deserializer.deserialize(invalidData, using: message)) { error in
      XCTAssertTrue(error is DeserializationError)
      if case .invalidUTF8String = error as? DeserializationError {
        // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
      } else {
        XCTFail("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ invalidUTF8String")
      }
    }
  }
  
  // MARK: - Deserialization Options Tests
  
  func testDeserializationOptions() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    let preservingOptions = DeserializationOptions(preserveUnknownFields: true)
    let discardingOptions = DeserializationOptions(preserveUnknownFields: false)
    
    XCTAssertTrue(preservingOptions.preserveUnknownFields)
    XCTAssertFalse(discardingOptions.preserveUnknownFields)
    
    let deserializerPreserving = BinaryDeserializer(options: preservingOptions)
    let deserializerDiscarding = BinaryDeserializer(options: discardingOptions)
    
    XCTAssertTrue(deserializerPreserving.options.preserveUnknownFields)
    XCTAssertFalse(deserializerDiscarding.options.preserveUnknownFields)
  }
  
  // MARK: - Error Description Tests
  
  func testDeserializationErrorDescriptions() {
    let error1 = DeserializationError.truncatedVarint
    XCTAssertEqual(error1.description, "Truncated varint")
    
    let error2 = DeserializationError.truncatedMessage
    XCTAssertEqual(error2.description, "Truncated message")
    
    let error3 = DeserializationError.invalidWireType(tag: 123)
    XCTAssertEqual(error3.description, "Invalid wire type in tag: 123")
    
    let error4 = DeserializationError.wireTypeMismatch(fieldName: "test", expected: .varint, actual: .fixed32)
    XCTAssertEqual(error4.description, "Wire type mismatch for field 'test': expected varint, got fixed32")
    
    let error5 = DeserializationError.invalidUTF8String
    XCTAssertEqual(error5.description, "Invalid UTF-8 string")
    
    let error6 = DeserializationError.malformedPackedField(fieldName: "packed_field")
    XCTAssertEqual(error6.description, "Malformed packed field: packed_field")
    
    let error7 = DeserializationError.unsupportedNestedMessage(typeName: "NestedType")
    XCTAssertEqual(error7.description, "Unsupported nested message type: NestedType")
  }
  
  func testDeserializationErrorEquality() {
    let error1 = DeserializationError.truncatedVarint
    let error2 = DeserializationError.truncatedVarint
    let error3 = DeserializationError.truncatedMessage
    
    XCTAssertEqual(error1, error2)
    XCTAssertNotEqual(error1, error3)
    
    let error4 = DeserializationError.invalidWireType(tag: 123)
    let error5 = DeserializationError.invalidWireType(tag: 123)
    let error6 = DeserializationError.invalidWireType(tag: 456)
    
    XCTAssertEqual(error4, error5)
    XCTAssertNotEqual(error4, error6)
  }
  
  // MARK: - Performance Tests
  
  func testDeserializationPerformance() throws {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π
    var message = MessageDescriptor(name: "LargeMessage", parent: fileDescriptor)
    
    for i in 1...100 {
      message.addField(FieldDescriptor(name: "field_\(i)", number: i, type: .int32))
    }
    fileDescriptor.addMessage(message)
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    var fieldValues: [String: Any] = [:]
    for i in 1...100 {
      fieldValues["field_\(i)"] = Int32(i)
    }
    
    let originalMessage = try messageFactory.createMessage(from: message, with: fieldValues)
    let data = try serializer.serialize(originalMessage)
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    measure {
      for _ in 0..<1000 {
        _ = try? deserializer.deserialize(data, using: message)
      }
    }
  }
  
  // MARK: - Edge Cases Tests
  
  func testDeserializeEmptyMessage() throws {
    var message = MessageDescriptor(name: "EmptyMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "optional_field", number: 1, type: .string))
    fileDescriptor.addMessage(message)
    
    let emptyMessage = messageFactory.createMessage(from: message)
    let data = try serializer.serialize(emptyMessage)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertFalse(try deserialized.hasValue(forField: "optional_field"))
  }
  
  func testDeserializeMessageWithLargeFieldNumbers() throws {
    var message = MessageDescriptor(name: "LargeFieldMessage", parent: fileDescriptor)
    message.addField(FieldDescriptor(name: "field_large", number: 1000, type: .int32))  // –ë–æ–ª—å—à–æ–π –Ω–æ–º–µ—Ä –ø–æ–ª—è, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
    fileDescriptor.addMessage(message)
    
    let original = try messageFactory.createMessage(from: message, with: ["field_large": Int32(42)])
    let data = try serializer.serialize(original)
    let deserialized = try deserializer.deserialize(data, using: message)
    
    XCTAssertEqual(try deserialized.get(forField: "field_large") as? Int32, Int32(42))
  }
}
